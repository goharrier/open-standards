#name: PR Slack Notification
#
#on:
#  pull_request:
#    types: [opened]
#
#env:
#  SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
#
#jobs:
#  send-notification:
#    runs-on: ubuntu-latest
#
#    steps:
#      - name: Notify Slack
#        run: |
#          curl -X POST -H 'Content-type: application/json' -H 'Authorization: Bearer ${{ secrets.SLACK_TOKEN}}' --data "{\"channel\":\"gitbook-pr-test\",\"text\":\"New PR created\\nDetails: *${{github.event.pull_request.title}}*\\nAuthor: *${{github.event.pull_request.user.login}}*\\n${{github.event.pull_request.html_url}}\"}" https://slack.com/api/chat.postMessage




#name: Notify Pull Request Slack
#
#on:
#  pull_request:
#    types:
#      - opened
#      - reopened
#      - closed
#
#jobs:
#  notify:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: daint2git/pull-request-slack-notifier@v1
#        with:
#          slack-bot-token: ${{ secrets.SLACK_TOKEN }}
#          slack-channel-id: ${{ secrets.SLACK_CHANNEL_ID }}
#          user-mapping: |
#            {
#              "jackcroninuipath": "U03K7LGLLRK",
#            "Stephen-Browne": "U049B624K0T"
#            }
#
#

#
#
#name: Daily PR Summary
#on:
#  pull_request:
#    types: [opened]           # Test trigger - runs when PR is opened
#  workflow_dispatch:          # Allow manual testing
#
#jobs:
#  pr-summary:
#    runs-on: ubuntu-latest
#    permissions:
#      pull-requests: read
#      contents: read
#    steps:
#      - name: Get Open PRs
#        id: get-prs
#        uses: actions/github-script@v7
#        with:
#          script: |
#            const { data: prs } = await github.rest.pulls.list({
#              owner: context.repo.owner,
#              repo: context.repo.repo,
#              state: 'open',
#              sort: 'created',
#              direction: 'desc'
#            });
#
#            if (prs.length === 0) {
#              core.setOutput('message', 'ðŸŽ‰ No open pull requests!');
#              return;
#            }
#
#            let message = `ðŸ“‹ *${prs.length} Open Pull Request${prs.length > 1 ? 's' : ''}*\n\n`;
#
#            for (const pr of prs) {
#              const daysSinceCreated = Math.floor((Date.now() - new Date(pr.created_at)) / (1000 * 60 * 60 * 24));
#              const ageText = daysSinceCreated === 0 ? 'today' :
#                             daysSinceCreated === 1 ? '1 day ago' :
#                             `${daysSinceCreated} days ago`;
#
#              const reviewRequests = pr.requested_reviewers?.map(r => r.login).join(', ') || 'None';
#
#              message += `â€¢ <${pr.html_url}|${pr.title}>\n`;
#              message += `  ðŸ‘¤ ${pr.user.login} â€¢ ðŸ“… ${ageText} â€¢ ðŸ‘€ ${reviewRequests}\n\n`;
#            }
#
#            core.setOutput('message', message);
#
#      - name: Send Slack notification
#        uses: 8398a7/action-slack@v3
#        with:
#          status: custom
#          custom_payload: |
#            {
#              "text": "Daily PR Summary",
#              "blocks": [
#                {
#                  "type": "section",
#                  "text": {
#                    "type": "mrkdwn",
#                    "text": "${{ steps.get-prs.outputs.message }}"
#                  }
#                }
#              ]
#            }
#        env:
#          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}




name: PR Summary Test
on:
  pull_request:
    types: [opened, reopened]           # Test trigger - runs when PR is opened
  workflow_dispatch:          # Allow manual testing
  # schedule:
  #   - cron: '0 14 * * 1-5'  # 2 PM UTC, weekdays (uncomment later)

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Get Open PRs
        id: get-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });
            
            if (prs.length === 0) {
              core.setOutput('message', 'ðŸŽ‰ No open pull requests!');
              return;
            }
            
            let message = `ðŸ“‹ *${prs.length} Open Documentation Pull Request${prs.length > 1 ? 's' : ''}*\n\n`;
            
            for (const pr of prs) {
              const daysSinceCreated = Math.floor((Date.now() - new Date(pr.created_at)) / (1000 * 60 * 60 * 24));
              const ageText = daysSinceCreated === 0 ? 'today' : 
                             daysSinceCreated === 1 ? '1 day ago' : 
                             `${daysSinceCreated} days ago`;
            
              const reviewRequests = pr.requested_reviewers?.map(r => r.login).join(', ') || 'None';
            
              message += `â€¢ <${pr.html_url}|${pr.title}>\n`;
              message += `  ðŸ‘¤ ${pr.user.login} â€¢ ðŸ“… ${ageText} \n â€¢ Reviewers: ðŸ‘€ - ${reviewRequests}\n\n`;
            }
            
            core.setOutput('message', message);

      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: ${{ steps.get-prs.outputs.message }}
          SLACK_TITLE: Documentation Needing Review
          SLACK_USERNAME: GitHub Bot
