name: Open Pull Requests Summary
on:
  pull_request:
    types: [opened, reopened]           # Test trigger - runs when PR is opened
  workflow_dispatch:          # Allow manual testing
  # schedule:
  #   - cron: '0 14 * * 1-5'  # 2 PM UTC, weekdays (uncomment later)

jobs:
  pr-summary:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: read
      contents: read
    steps:
      - name: Get Open PRs
        id: get-prs
        uses: actions/github-script@v7
        with:
          script: |
            // GitHub username to Slack user ID mapping
            const userMapping = {
              "jackcroninuipath": "U03K7LGLLRK",
              "Stephen-Browne": "U049B624K0T",
              "JAertgeerts": "U87A5RJ1E",
              "JMac1066": "U05MQ0K80E4",
              "hongi-pham": "U06SYQ3CPUJ",
              "javier-orbe-harrier": "U08DDJEQGEQ",
              "sathishgoharrier": "U03088B4FJP",
              "tverellen": "U08240CELP8",
              "wimvelzeboer": "U025WNW8RU4"
            };
            
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              sort: 'created',
              direction: 'desc'
            });
            
            if (prs.length === 0) {
              core.setOutput('message', 'ðŸŽ‰ No open pull requests!');
              return;
            }
            
            let message = `ðŸ“‹ *${prs.length} Open Documentation Pull Request${prs.length > 1 ? 's' : ''}*\n\n`;
            
            for (const pr of prs) {
              const daysSinceCreated = Math.floor((Date.now() - new Date(pr.created_at)) / (1000 * 60 * 60 * 24));
              const ageText = daysSinceCreated === 0 ? 'today' : 
                             daysSinceCreated === 1 ? '1 day ago' : 
                             `${daysSinceCreated} days ago`;
            
              const reviewRequests = pr.requested_reviewers?.map(reviewer => {
                const slackId = userMapping[reviewer.login];
                return slackId ? `<@${slackId}>` : reviewer.login;
              }).join(', ') || 'None';
            
              message += `â€¢ <${pr.html_url}|${pr.title}>\n`;
              message += `  ðŸ‘¤ ${pr.user.login} â€¢ ðŸ“… ${ageText} \n â€¢ Reviewers: ðŸ‘€ - ${reviewRequests}\n\n`;
            }
            
            core.setOutput('message', message);

      - name: Send Slack notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: ${{ steps.get-prs.outputs.message }}
          SLACK_TITLE: Documentation Needing Review!
          SLACK_USERNAME: GitHub Bot
          SLACK_FOOTER: Attempt to get all open documentation requests reviewed ASAP
          MSG_MINIMAL: true
          ENABLE_ESCAPES: true
